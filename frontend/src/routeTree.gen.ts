/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignUpRouteImport } from './routes/sign-up'
import { Route as SignInRouteImport } from './routes/sign-in'
import { Route as MenuRouteImport } from './routes/menu'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MenuHotDrinkRouteImport } from './routes/menu/hot-drink'

const SignUpRoute = SignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInRoute = SignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const MenuRoute = MenuRouteImport.update({
  id: '/menu',
  path: '/menu',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MenuHotDrinkRoute = MenuHotDrinkRouteImport.update({
  id: '/hot-drink',
  path: '/hot-drink',
  getParentRoute: () => MenuRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/menu': typeof MenuRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/menu/hot-drink': typeof MenuHotDrinkRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/menu': typeof MenuRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/menu/hot-drink': typeof MenuHotDrinkRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/menu': typeof MenuRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/sign-up': typeof SignUpRoute
  '/menu/hot-drink': typeof MenuHotDrinkRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/menu' | '/sign-in' | '/sign-up' | '/menu/hot-drink'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/menu' | '/sign-in' | '/sign-up' | '/menu/hot-drink'
  id: '__root__' | '/' | '/menu' | '/sign-in' | '/sign-up' | '/menu/hot-drink'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MenuRoute: typeof MenuRouteWithChildren
  SignInRoute: typeof SignInRoute
  SignUpRoute: typeof SignUpRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/menu': {
      id: '/menu'
      path: '/menu'
      fullPath: '/menu'
      preLoaderRoute: typeof MenuRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/menu/hot-drink': {
      id: '/menu/hot-drink'
      path: '/hot-drink'
      fullPath: '/menu/hot-drink'
      preLoaderRoute: typeof MenuHotDrinkRouteImport
      parentRoute: typeof MenuRoute
    }
  }
}

interface MenuRouteChildren {
  MenuHotDrinkRoute: typeof MenuHotDrinkRoute
}

const MenuRouteChildren: MenuRouteChildren = {
  MenuHotDrinkRoute: MenuHotDrinkRoute,
}

const MenuRouteWithChildren = MenuRoute._addFileChildren(MenuRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MenuRoute: MenuRouteWithChildren,
  SignInRoute: SignInRoute,
  SignUpRoute: SignUpRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
